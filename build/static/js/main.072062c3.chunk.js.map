{"version":3,"sources":["images/back.svg","images/loading.gif","images/magnifying-glass.svg","images/edit.svg","MyContext.js","components/Header/Header.js","components/Footer/Footer.js","components/CaruselComponent/CaruselComponent.js","components/ContentChest/Trailer/Trailer.js","components/PopUp/PopUp.js","components/ContentChest/MovieSearch/MovieSearch.js","components/ContentChest/MoviePersonal/MoviePersonal.js","components/ContentChest/MoviesSaved/MoviesSaved.js","components/ContentChest/ContentChest.js","Global/GlobalState.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","React","createContext","title","updateTitle","console","log","Header","props","state","className","onClick","context","browsedHistory","push","Component","contextType","MyContext","Footer","apiKey","CaruselComponent","isToggleOn","movies","movieIds","links","images","titles","preLoadImg","preLoadImgDisplay","preLoadTitle","animate","interval","targeted","pause","bind","unpause","doStuff","onSearch","params","this","setInterval","a","b","c","copy","pop","copy2","copy3","unshift","setState","setTimeout","fetch","then","res","json","data","results","linksArray","titlesArray","idsArray","forEach","picture","separateLink","poster_path","separateTitle","separateId","id","Image","src","catch","event","clearInterval","target","pointedValue","setSelectedMovieHandler","name","Consumer","onMouseOver","onMouseOut","map","movie","i","key","alt","loading","Trailer","modal","trailer","movieID","response","length","error","conditionalTrailerRender","style","width","height","frameBorder","PopUp","popUpErrorText","MovieSearch","popUpToggle","popUpID","value","selectedMovie","handleChange","handleSubmit","toggleSearch","setWrapperRef","handleClickOutside","handleCaruselSubmit","addToCollection","movieId","pickedCollection","addedToCollection","method","body","JSON","stringify","collectionID","headers","exist","preventDefault","errors","divScrolling","document","getElementsByClassName","overflowY","border","status_code","addEventListener","prevProps","prevState","removeEventListener","node","wrapperRef","contains","ref","onSubmit","type","placeholder","onChange","searchIcon","vote_average","release_date","overview","trailerCondition","MoviePersonal","savedMovies","newList","existingList","menu","listShow","createList","newName","newPassword","oldPassword","toggleOptions","backtoMenu","retrieveList","handleChangeName","handleChangePassword","handleChangeOldName","handleChangeOldPassword","passingHistory","history","oldName","e","password","fail","success","updateKey","listname","conditionalMovieSavedRender","backImage","htmlFor","MoviesSaved","editMode","uniqueKey","match","url","substr","newMovie","noExistentList","listName","editingMode","removeMovie","movieSavedCondition","result","ID","removeID","removefromDom","filter","item","dataApi","draggable","editImage","undefined","ContentChest","exact","path","component","GlobalState","condition","Provider","children","App","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.072062c3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/back.fc31210d.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.3bda8dd9.gif\";","module.exports = __webpack_public_path__ + \"static/media/magnifying-glass.45272a59.svg\";","module.exports = __webpack_public_path__ + \"static/media/edit.a68029c5.svg\";","import React from 'react';\r\n\r\nexport default React.createContext({\r\n  title: '',\r\n  updateTitle: title => {console.log(title,'its in context')},\r\n});\r\n","import React from 'react';\r\nimport './Header.css';\r\nimport MyContext from '../../MyContext';\r\n\r\n\r\nclass Header extends React.Component {\r\n  static contextType = MyContext;\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n      };\r\n\r\n      // This binding is necessary to make `this` work in the callback\r\n  }\r\n  render() {\r\n    return (\r\n      <div className='Header'>\r\n          <div className='Logo' onClick={()=>(console.log(this.context.browsedHistory.push('/')))}>My Favourite movies</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './Footer.css';\r\n\r\n\r\nclass Footer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            apiKey: 'bc4ef851ecf12182fb8bcef42dc17d08'\r\n        };\r\n\r\n        // This binding is necessary to make `this` work in the callback\r\n       \r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"footer\">\r\n            <p>Made by Michael & Oleg.</p>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport './CaruselComponent.css';\r\nimport loading from '../../images/loading.gif'\r\nimport MyContext from '../../MyContext';\r\n\r\nclass CaruselComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isToggleOn: false,\r\n            movies: [],\r\n            movieIds: [],\r\n            links: [],\r\n            images: [],\r\n            titles: [],\r\n            preLoadImg: [],\r\n            preLoadImgDisplay: [],\r\n            preLoadTitle: [],\r\n            animate: false,\r\n            interval: '',\r\n            targeted: \"\"\r\n        };\r\n        this.pause = this.pause.bind(this);\r\n        this.unpause = this.unpause.bind(this);\r\n        this.doStuff = this.doStuff.bind(this);\r\n        this.onSearch = this.onSearch.bind(this);\r\n    }\r\n\r\n    doStuff(params) {\r\n        // this.setState({ intervalTimer: 2000 })\r\n        this.interval = setInterval(() => {\r\n            let a = this.state.preLoadImg\r\n            let b = this.state.titles\r\n            let c = this.state.movieIds\r\n            var copy = a.pop()\r\n            var copy2 = b.pop()\r\n            var copy3 = c.pop()\r\n            // console.log(copy)\r\n            a.unshift(copy);\r\n            b.unshift(copy2);\r\n            c.unshift(copy3);\r\n            this.setState({\r\n                preLoadImgDisplay: a,\r\n                titles: b,\r\n                movieIds: c,\r\n                animate: true\r\n            })\r\n            // console.log(this.state.preLoadImgDisplay);\r\n            setTimeout(() => {\r\n                this.setState({ animate: false })\r\n            }, 1000)\r\n\r\n        }, 2000);\r\n    }\r\n\r\n    // `${this.state.intervalTimer}`\r\n    componentDidMount() {\r\n        // event.preventDefault()\r\n        // console.log(this.state.value)\r\n        fetch(`https://api.themoviedb.org/3/discover/movie?api_key=bc4ef851ecf12182fb8bcef42dc17d08&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&primary_release_year=2019`)\r\n            .then(res => res.json())\r\n            .then((data) => {\r\n                this.setState({ movies: data.results })\r\n                console.log(this.state.movies)\r\n                let linksArray = []\r\n                let titlesArray = []\r\n                let idsArray = []\r\n                this.state.movies.forEach((picture) => {\r\n                    let separateLink = `https://image.tmdb.org/t/p/w780/${picture.poster_path}`\r\n                    linksArray.push(separateLink)\r\n                    let separateTitle = picture.title\r\n                    titlesArray.push(separateTitle)\r\n                    let separateId = picture.id\r\n                    idsArray.push(separateId)\r\n                })\r\n                this.setState({\r\n                    links: linksArray,\r\n                    titles: titlesArray,\r\n                    movieIds: idsArray\r\n                })\r\n                let tempPreload = []\r\n                this.state.links.forEach((picture) => {\r\n                    const img = new Image();\r\n                    img.src = picture;\r\n                    this.state.preLoadImg.push(picture)\r\n                    // console.log(this.state.preLoadImg)\r\n                });\r\n\r\n            })\r\n            .catch(console.log)\r\n        this.doStuff()\r\n    }\r\n\r\n    // componentWillUnmount() {\r\n    //     clearInterval(this.interval);\r\n    // }\r\n    pause(event) {\r\n        clearInterval(this.interval);\r\n    }\r\n    unpause(event) {\r\n        this.doStuff()\r\n\r\n    }\r\n    \r\n    //THIS IS NOT IN USE ANYMORE AFTER GLOBAL STATE WAS IMPLEMENTED then why is it even here??\r\n    onSearch(event) {\r\n        // event.preventDefault();\r\n        console.log(event.target.id)\r\n        let pointedValue = event.target.id\r\n        // console.dir(event.target.id)\r\n        this.props.setSelectedMovieHandler({ name: pointedValue });\r\n        this.setState({ targeted: pointedValue });\r\n        console.log(this.state.targeted);\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <MyContext.Consumer>\r\n                {context => (\r\n                    <div onMouseOver={(event) => this.pause(event)} onMouseOut={(event) => this.unpause(event)} className=\"caruselControlsWrapper\">\r\n                        <div className=\"carusel\">\r\n                            {\r\n                                this.state.movies.map((movie, i) => {\r\n                                    return (\r\n                                        <div onClick={(event) => {context.updateTitle(event.target.id) }} key={i}>\r\n                                            <div className={(this.state.animate && i === 0) ? \"caruselCard cardMoveLeft\" : \"caruselCard\"}>\r\n                                                {\r\n                                                    this.state.preLoadImgDisplay[i] ?\r\n                                                        <img className=\"caruselImage\" id={this.state.movieIds[i]} src={this.state.preLoadImgDisplay[i]} alt='poster'></img>\r\n                                                        :\r\n                                                        <img className=\"LoadingPlaceHolder\" src={loading} alt='poster'></img>\r\n                                                }\r\n                                                <div className=\"caruselTitle\" id={this.state.movieIds[i]}>{this.state.titles[i]}</div>\r\n                                            </div>\r\n\r\n                                        </div>)\r\n                                }\r\n                                )}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </MyContext.Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CaruselComponent;","import React from 'react';\r\nimport './Trailer.css';\r\nimport MyContext from '../../../MyContext';\r\n\r\n\r\nclass Trailer extends React.Component {\r\n  static contextType = MyContext;\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      modal: true,\r\n      trailer: '',\r\n      apiKey: 'bc4ef851ecf12182fb8bcef42dc17d08'\r\n    };\r\n\r\n    // This binding is necessary to make `this` work in the callback\r\n  }\r\n  componentDidMount() {\r\n    fetch(`https://api.themoviedb.org/3/movie/${this.props.movieID}/videos?api_key=${this.state.apiKey}&language=en-US`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        if (data.results.length !== 0) {\r\n          this.setState({ trailer: data.results[0].key })\r\n          this.setState({ modal: true })\r\n        }\r\n        console.log(this.state.trailer)\r\n      })\r\n      .catch(error => console.error(error))\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.modal ?\r\n          <div>\r\n            {this.state.trailer ?\r\n              <div className='modal'>\r\n                <div className=\"modal-content\">\r\n                  <span className=\"close\" onClick={() => (this.setState({ modal: false }),this.context.conditionalTrailerRender(false))}>&times;</span>\r\n                  <iframe\r\n                    title='trailer'\r\n                    style={{\r\n                      width: \"100%\",\r\n                      height: \"100%\"\r\n                    }}\r\n                    src={`https://www.youtube.com/embed/${this.state.trailer}`}\r\n                    frameBorder=\"0\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              :\r\n              <div className='modal'>\r\n              <div className=\"modal-content\">\r\n                <span className=\"close\" onClick={() => (this.setState({ modal: false }),this.context.conditionalTrailerRender(false))}>&times;</span>\r\n                <div className='noTrailerFound'>'Trailer not found or not yet released.'</div>\r\n              </div>\r\n            </div>\r\n            }\r\n          </div>\r\n          :\r\n          null\r\n        }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Trailer;","import React from 'react';\r\nimport './PopUp.css';\r\n\r\n\r\n\r\n\r\nclass PopUp extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='popUpWrapper'>\r\n                <div className='popUpTriangle'></div>\r\n                <div className='popUp'>{this.props.popUpErrorText}</div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PopUp;","import React from 'react';\r\nimport './MovieSearch.css';\r\nimport Trailer from '../Trailer/Trailer'\r\nimport searchIcon from '../../../images/magnifying-glass.svg'\r\nimport MyContext from '../../../MyContext';\r\nimport PopUp from '../../PopUp/PopUp';\r\n\r\nlet name;\r\nclass MovieSearch extends React.Component {\r\n    static contextType = MyContext;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isToggleOn: false,\r\n            popUpToggle: false,\r\n            popUpErrorText: '',\r\n            popUpID: '',\r\n            value: '',\r\n            movies: [],\r\n            selectedMovie: '',\r\n            trailer: '',\r\n            animate: false,\r\n            apiKey: 'bc4ef851ecf12182fb8bcef42dc17d08'\r\n        };\r\n\r\n        // This binding is necessary to make `this` work in the callback\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.toggleSearch = this.toggleSearch.bind(this);\r\n        this.setWrapperRef = this.setWrapperRef.bind(this);\r\n        this.handleClickOutside = this.handleClickOutside.bind(this);\r\n        this.handleCaruselSubmit = this.handleCaruselSubmit.bind(this);\r\n        this.addToCollection = this.addToCollection.bind(this);\r\n    }\r\n\r\n\r\n    toggleSearch() {\r\n        this.setState(state => ({ isToggleOn: !state.isToggleOn }));\r\n    }\r\n\r\n\r\n    addToCollection(movieId) {\r\n        //popUpID saves to state the movie id to compare it with movie id from map in dom making the pop up show only at selected element(cycle)\r\n        this.setState({popUpID:movieId})\r\n        // sets pop up to false before checking anything, basically closes the previous open popups before creating new one\r\n        this.setState(({ popUpToggle: false }));\r\n\r\n        //checks if user has collection(unique key) registered\r\n        if (this.context.pickedCollection) {\r\n            this.context.addedToCollection(movieId);\r\n            fetch('http://localhost:4000/addMovie', {\r\n                method: 'POST',\r\n                body: JSON.stringify({ movieID: movieId, collectionID: this.context.pickedCollection }),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }).then(res => res.json())\r\n                .then(data => {\r\n                    console.log(data)\r\n                    if (data.exist) {\r\n                        this.setState(state => ({ popUpToggle: !state.popUpToggle }));\r\n                        this.setState({ popUpErrorText: data.exist });\r\n                    }\r\n                })\r\n                .catch(error => console.error('Error:', error));\r\n        } else {\r\n            //shows error message cus user has no collection(unique key)\r\n            this.setState(state => ({ popUpToggle: !state.popUpToggle }));\r\n            this.setState({ popUpErrorText: 'Please register a new list' });\r\n        }\r\n    }\r\n\r\n\r\n    handleChange(event) {\r\n        this.setState({ value: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        //search for movies\r\n        event.preventDefault();\r\n        this.setState({ animate: true });\r\n        setTimeout(() => {\r\n            this.setState({ animate: false })\r\n        }, 1000)\r\n        fetch(`https://api.themoviedb.org/3/search/movie?api_key=${this.state.apiKey}&language=en-US&query=${this.state.value}&page=1&include_adult=false`)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                if (!data.errors) {\r\n                    this.setState({ movies: data })\r\n                    let divScrolling = document.getElementsByClassName('moviesFound')\r\n                    divScrolling[0].style.overflowY = \"scroll\"\r\n                    divScrolling[0].style.height = \"400px\"\r\n                    divScrolling[0].style.border = '2px solid white';\r\n                }\r\n            })\r\n            .catch(error => console.error(error))\r\n    }\r\n\r\n    handleCaruselSubmit() {\r\n        //handles the received movie id from carusel component\r\n        console.log(this.state.selectedMovie)\r\n        // fetch(`https://api.themoviedb.org/3/find/movie?api_key=${this.state.apiKey}&language=en-US&query=${this.state.selectedMovie}&page=1&include_adult=false`)\r\n        if (this.state.selectedMovie) {\r\n            fetch(`https://api.themoviedb.org/3/movie/${this.state.selectedMovie}?api_key=${this.state.apiKey}&language=en-US`)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                    if (!data.errors || !data.status_code) {\r\n                        this.setState({ movies: { results: [data] } })\r\n                        this.setState({ value: this.state.movies.results[0].title });\r\n                        let divScrolling = document.getElementsByClassName('moviesFound')\r\n                        divScrolling[0].style.overflowY = \"scroll\"\r\n                        divScrolling[0].style.height = \"400px\"\r\n                        divScrolling[0].style.border = '2px solid white';\r\n                    }\r\n                })\r\n                .catch(error => console.error(error))\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    componentDidMount(event) {\r\n        //part of clickoutside detector\r\n        document.addEventListener('mousedown', this.handleClickOutside);\r\n    }\r\n\r\n\r\n\r\n    // Calls after component updated\r\n    // has access of previous state and props with snapshot\r\n    // Can call methods here\r\n    // setState inside this will cause infinite loop\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        //searches for a movie by id received from carusel component \r\n        if (prevState.selectedMovie !== this.context.title) {\r\n            this.setState({ selectedMovie: this.context.title });\r\n            this.handleCaruselSubmit();\r\n            this.setState({ animate: false })\r\n        }\r\n    }\r\n\r\n\r\n    componentWillUnmount() {\r\n        //part of clickoutside detector\r\n        document.removeEventListener('mousedown', this.handleClickOutside);\r\n    }\r\n\r\n    setWrapperRef(node) {\r\n        this.wrapperRef = node;\r\n    }\r\n\r\n    handleClickOutside(event) {\r\n        if (this.wrapperRef && !this.wrapperRef.contains(event.target) && event.target.className !== \"caruselImage\" && event.target.className !== \"caruselTitle\") {\r\n            let divScrolling = document.getElementsByClassName('moviesFound')\r\n            divScrolling[0].style.overflowY = \"none\"\r\n            divScrolling[0].style.height = 0\r\n            divScrolling[0].style.border = 'none';\r\n            this.setState({ value: '' });\r\n        }\r\n        if (this.wrapperRef && !this.wrapperRef.contains(event.target)) {\r\n            this.setState({ popUpToggle: false });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='cardWrapper' ref={this.setWrapperRef} >\r\n                <div className='newCard'>\r\n                    <div className='newCardContent'>\r\n                        <form onSubmit={this.handleSubmit} className='searchForm'>\r\n                            <input type='text' placeholder='Search' value={this.state.value} onChange={this.handleChange} className='inputSearch'></input>\r\n                            <button type='submit' value='Search' className='submitSearch'>\r\n                                <img src={searchIcon} alt='search icon' width='25px' height='25x'></img>\r\n                            </button>\r\n                        </form>\r\n                        <div className='moviesFound'>\r\n                            {this.state.movies.results ?\r\n                                this.state.movies.results.map((movie, i) => {\r\n                                    return (\r\n                                        <div key={i} className={this.state.animate ? \"movieBlockWrapper\" : \"movieBlockWrapperReset\"} >\r\n                                            <div key={i} className='movieBlock'>\r\n                                                <div className='movieTitle'>\r\n                                                    {movie.title}\r\n                                                    <img src={`https://image.tmdb.org/t/p/w780/${movie.poster_path}`} alt='poster' className='poster'></img>\r\n                                                </div>\r\n                                                <div className='movieDescription'>\r\n                                                    <div className='movieScore'>Rating: {movie.vote_average ? movie.vote_average : 'unknown'}</div>\r\n                                                    <div className='movieRelease'>Release date: {movie.release_date ? movie.release_date : 'unknown'}</div>\r\n                                                    <div className='movieOverview'>{movie.overview ? movie.overview : 'unknown'}</div>\r\n                                                    <div className='movieblockButtons'>\r\n                                                        <div className='movieButton' onClick={() => (this.setState({ trailer: movie.id }),this.context.conditionalTrailerRender(true))}>Watch trailer</div>\r\n                                                        <div className='movieButton'  onClick={() => this.addToCollection(movie.id)}>Add to watch list</div>\r\n\r\n                                                        {this.state.popUpID === movie.id && this.state.popUpToggle ? <PopUp popUpErrorText={this.state.popUpErrorText} /> : null}\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                            {movie.id === this.state.trailer && this.context.trailerCondition ? <Trailer movieID={this.state.trailer} /> : null}\r\n                                        </div>\r\n                                    )\r\n                                })\r\n                                :\r\n                                null\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MovieSearch;","import React from 'react';\r\nimport './MoviePersonal.css';\r\nimport backImage from './../../../images/back.svg'\r\nimport MyContext from '../../../MyContext';\r\n\r\n\r\n\r\n\r\nclass MoviePersonal extends React.Component {\r\n    static contextType = MyContext;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            apiKey: 'bc4ef851ecf12182fb8bcef42dc17d08',\r\n            savedMovies: [],\r\n            newList: false,\r\n            existingList: false,\r\n            menu: true,\r\n            listShow: false,\r\n            createList: false,\r\n            newName: '',\r\n            newPassword: '',\r\n            oldPassword: '',\r\n            error: ''\r\n\r\n        };\r\n        // This binding is necessary to make `this` work in the callback\r\n        this.toggleOptions = this.toggleOptions.bind(this);\r\n        this.backtoMenu = this.backtoMenu.bind(this);\r\n        this.retrieveList = this.retrieveList.bind(this);\r\n        this.createList = this.createList.bind(this);\r\n        this.handleChangeName = this.handleChangeName.bind(this);\r\n        this.handleChangePassword = this.handleChangePassword.bind(this);\r\n        this.handleChangeOldName = this.handleChangeOldName.bind(this);\r\n        this.handleChangeOldPassword = this.handleChangeOldPassword.bind(this);\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.context.passingHistory(this.props.history)\r\n    }\r\n\r\n\r\n    handleChangeName(event) {\r\n        this.setState({\r\n            newName: event.target.value\r\n        });\r\n    }\r\n    handleChangePassword(event) {\r\n        this.setState({\r\n            newPassword: event.target.value\r\n        });\r\n    }\r\n    handleChangeOldName(event) {\r\n        this.setState({\r\n            oldName: event.target.value\r\n        });\r\n    }\r\n    handleChangeOldPassword(event) {\r\n        this.setState({\r\n            oldPassword: event.target.value\r\n        });\r\n    }\r\n\r\n    toggleOptions(e) {\r\n        if (e.target.id === 'personalCreateList') {\r\n            this.setState({ newList: true })\r\n            this.setState({ menu: false })\r\n        }\r\n        if (e.target.id === 'personalOpenExisting') {\r\n            this.setState({ existingList: true })\r\n            this.setState({ menu: false })\r\n        }\r\n    }\r\n\r\n    backtoMenu(e) {\r\n        this.setState({ newList: false })\r\n        this.setState({ existingList: false })\r\n        this.setState({ menu: true })\r\n        this.setState({ error: null })\r\n\r\n    }\r\n\r\n    //Existing user\r\n    retrieveList(e) {\r\n        e.preventDefault();\r\n        if(this.state.oldPassword){\r\n        fetch('http://localhost:4000/userData', {\r\n            method: 'POST',\r\n            body: JSON.stringify({ password: this.state.oldPassword }),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .then(data => {\r\n                if (data.fail) {\r\n                    console.log(data.fail)\r\n                    this.setState({ error: data.fail })\r\n                }\r\n                if (data.success) {\r\n                    this.context.updateKey(this.state.oldPassword)\r\n                    this.setState({ error: null })\r\n                    this.setState({ newList: false })\r\n                    this.setState({ existingList: false })\r\n                    this.setState({ menu: false })\r\n                    this.setState({ createList: false })\r\n                    this.setState({ listShow: true })\r\n                    this.props.history.push(`/${this.state.oldPassword}`);\r\n\r\n                }\r\n\r\n            })\r\n            .catch(error => console.error('Error:', error));\r\n        }else{\r\n            this.setState({ error: 'Please fill all the fields!' })\r\n        }\r\n    }\r\n\r\n    //NEW USER\r\n    createList(e) {\r\n        e.preventDefault();\r\n        if (this.state.newName && this.state.newPassword) {\r\n            fetch('http://localhost:4000/userData', {\r\n                method: 'POST',\r\n                body: JSON.stringify({ listname: this.state.newName, password: this.state.newPassword, newList: true }),\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            }).then(res => res.json())\r\n                .then(data => {\r\n                    if (data.fail) {\r\n                        console.log(data.fail)\r\n                        this.setState({ error: data.fail })\r\n                    }\r\n                    if (data.success) {\r\n                        this.context.updateKey(this.state.newPassword)\r\n                        this.context.conditionalMovieSavedRender('newList')\r\n                        this.setState({ error: null })\r\n                        this.setState({ newList: false })\r\n                        this.setState({ existingList: false })\r\n                        this.setState({ menu: false })\r\n                        this.setState({ listShow: false })\r\n                        this.setState({ createList: true })\r\n                        this.props.history.push(`/${this.state.newPassword}`);\r\n                    }\r\n\r\n                })\r\n                .catch(error => console.error('Error:', error));\r\n        }else{\r\n            this.setState({ error: 'Please fill all the fields!' })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className='savedMovieWrapper'>\r\n                {this.state.menu ?\r\n                    <div className='personalMenu'>\r\n                        <div onClick={(e) => this.toggleOptions(e)} id='personalCreateList' className='personalButton'>Create List</div>\r\n                        <div onClick={(e) => this.toggleOptions(e)} id='personalOpenExisting' className='personalButton'>Open Existing</div>\r\n                    </div>\r\n                    : null\r\n                }\r\n                {this.state.existingList ?\r\n                    <form className='savedMovieForm' onSubmit={(e) => this.retrieveList(e)}>\r\n                        <img className='personalBackButton' src={backImage} onClick={() => this.backtoMenu()}></img>\r\n                        <label htmlFor=\"Password\" className='savedMovieFormLabel'>Unique key</label>\r\n                        <input type=\"text\" onChange={this.handleChangeOldPassword} value={this.state.oldPassword} className=\"savedMovieFormInput\" id=\"Password\" placeholder=\"unique key\" />\r\n                        {this.state.error ? <div className='moviePersonalError'>{this.state.error}</div> : null}\r\n                        <button className='personalContinueButton' type='submit'>Continue</button>\r\n                    </form>\r\n                    :\r\n                    null\r\n                }\r\n                {this.state.newList ?\r\n                    <form className='savedMovieForm' onSubmit={(e) => this.createList(e)}>\r\n                        <img className='personalBackButton' src={backImage} onClick={() => this.backtoMenu()}></img>\r\n                        <label htmlFor=\"List name\" className='savedMovieFormLabel'>List name</label>\r\n                        <input type=\"text\" onChange={this.handleChangeName} value={this.state.newName} className=\"savedMovieFormInput\" id=\"List name\" placeholder=\"list name\" />\r\n                        <label htmlFor=\"Password\" className='savedMovieFormLabel'>Unique key</label>\r\n                        <input type=\"text\" onChange={this.handleChangePassword} value={this.state.newPassword} className=\"savedMovieFormInput\" id=\"Password\" placeholder=\"unique key\" />\r\n                        {this.state.error ? <div className='moviePersonalError'>{this.state.error}</div> : null}\r\n                        <button className='personalContinueButton' type='submit'>Continue</button>\r\n                    </form>\r\n                    :\r\n                    null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MoviePersonal;","import React from 'react';\r\nimport './MoviesSaved.css';\r\nimport editImage from './../../../images/edit.svg'\r\nimport backImage from './../../../images/back.svg'\r\nimport MyContext from '../../../MyContext'\r\n\r\n\r\n\r\nclass MoviesSaved extends React.Component {\r\n    static contextType = MyContext;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            apiKey: 'bc4ef851ecf12182fb8bcef42dc17d08',\r\n            savedMovies: [],\r\n            editMode: false,\r\n            uniqueKey: this.props.match.url.substr(1),\r\n            newMovie: \"\",\r\n            noExistentList: '',\r\n            listName: ''\r\n        };\r\n        // This binding is necessary to make `this` work in the callback\r\n        this.editingMode = this.editingMode.bind(this);\r\n        this.removeMovie = this.removeMovie.bind(this);\r\n    }\r\n    componentDidMount(event, match) {\r\n        this.context.passingHistory(this.props.history)\r\n        console.log(this.context.movieSavedCondition)\r\n        fetch('http://localhost:4000/moviesData', {\r\n            method: 'POST',\r\n            body: JSON.stringify({ key: this.state.uniqueKey }),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .then(data => {\r\n                if (data.fail) {\r\n                    console.log(data.fail)\r\n                    this.setState({ noExistentList: data.fail })\r\n                }\r\n                if (data.success) {\r\n                    console.log(data.result[0].listname)\r\n                    this.setState({ listName: data.result[0].listname })\r\n                    data.result[0].movies.forEach(movie => {\r\n                        fetch(` https://api.themoviedb.org/3/movie/${movie.ID}?api_key=${this.state.apiKey}&language=en-US`)\r\n                            .then(response => response.json())\r\n                            .then(data => {\r\n                                if (!data.errors) {\r\n                                    this.setState({ savedMovies: [...this.state.savedMovies, data] })\r\n                                }\r\n                            })\r\n                            .catch(error => console.error(error))\r\n                    });\r\n                }\r\n            })\r\n            .catch(error => console.error('Error:', error));\r\n    }\r\n\r\n    editingMode() {\r\n        this.setState(state => ({ editMode: !state.editMode }))\r\n    }\r\n    removeMovie(movie) {\r\n        console.log(movie)\r\n        fetch('http://localhost:4000/removeMovie', {\r\n            method: 'POST',\r\n            body: JSON.stringify({ key: this.state.uniqueKey, removeID: movie }),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(res => res.json())\r\n            .then(data => {\r\n                if (data.success) {\r\n                    const removefromDom = this.state.savedMovies.filter(item => item.id !== movie)\r\n                    this.setState({ savedMovies: removefromDom })\r\n                }\r\n\r\n            })\r\n            .catch(error => console.error('Error:', error));\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.state.newMovie !== this.context.selectedMovie) {\r\n            this.setState({ newMovie: this.context.selectedMovie })\r\n            fetch(` https://api.themoviedb.org/3/movie/${this.context.selectedMovie}?api_key=${this.state.apiKey}&language=en-US`)\r\n                .then(response => response.json())\r\n                .then(dataApi => {\r\n                    let checkifDup = this.state.savedMovies.filter(function (item) {\r\n                        return item.id === dataApi.id\r\n                    });\r\n                    if (checkifDup.length === 0) {\r\n                        this.setState({ savedMovies: [...this.state.savedMovies, dataApi] })\r\n                    }\r\n                })\r\n                .catch(error => console.error(error))\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className='savedMovieWrapper'>\r\n                <div className='savedMovieListName'>{this.state.listName}</div>\r\n                <div className='savedMovieSelectionMenu'>\r\n                    <img className='savedMovieBacktoMenu' src={backImage} draggable=\"false\" onClick={() => this.props.history.push('/')} alt='backImage'></img>\r\n                    <div onClick={() => this.editingMode()} className='savedMovieEditMode'>Toggle edit mode <img src={editImage} className='savedMovieEdit'></img></div>\r\n                </div>\r\n                {this.context.movieSavedCondition === undefined && !this.state.noExistentList ?\r\n                    <div className='savedMovieList'>\r\n                        {this.state.savedMovies.map((movie, i) => {\r\n                            return (\r\n                                <div key={i}>\r\n                                    <div className={this.state.editMode ? 'savedMovieBlock' : 'savedMovieBlocknoAnimation'} >\r\n                                        {this.state.editMode ? <div className='savedMovieDelete' onClick={() => this.removeMovie(movie.id)}>&times;</div> : null}\r\n                                        <img className='savedMoviePoster' id={this.state.savedMovies[i].id} onClick={(event) => { this.context.updateTitle(event.target.id) }} draggable=\"false\" src={`https://image.tmdb.org/t/p/w780/${movie.poster_path}`} alt='poster'></img>\r\n                                        <div className='savedMovieTitle' id={this.state.savedMovies[i].id} onClick={(event) => { this.context.updateTitle(event.target.id) }} draggable=\"false\" src={`https://image.tmdb.org/t/p/w780/${movie.poster_path}`}>{movie.title}</div>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                    : null\r\n                }\r\n                {this.state.noExistentList ?\r\n                    <div className='savedMovieList'>\r\n                        <h1 className='savedMovieAddFirst'>{this.state.noExistentList}</h1>\r\n                    </div>\r\n                    : null\r\n                }\r\n                {this.context.movieSavedCondition === 'newList' ?\r\n                    <div className='savedMovieList'>\r\n                        {this.state.savedMovies.length ?\r\n                            this.state.savedMovies.map((movie, i) => {\r\n                                return (\r\n                                    <div key={i}>\r\n                                        <div className={this.state.editMode ? 'savedMovieBlock' : 'savedMovieBlocknoAnimation'} >\r\n                                            {this.state.editMode ? <div className='savedMovieDelete' onClick={() => this.removeMovie(movie.id)}>&times;</div> : null}\r\n                                            <img className='savedMoviePoster' id={this.state.savedMovies[i].id} onClick={(event) => { this.context.updateTitle(event.target.id) }} draggable=\"false\" src={`https://image.tmdb.org/t/p/w780/${movie.poster_path}`} alt='poster'></img>\r\n                                            <div className='savedMovieTitle' id={this.state.savedMovies[i].id} onClick={(event) => { this.context.updateTitle(event.target.id) }} draggable=\"false\" src={`https://image.tmdb.org/t/p/w780/${movie.poster_path}`}>{movie.title}</div>\r\n                                        </div>\r\n                                    </div>\r\n                                )\r\n                            })\r\n                            :\r\n                            <h1 className='savedMovieAddFirst'>Start by adding your first movie &uarr;</h1>\r\n                        }\r\n\r\n                    </div>\r\n                    : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MoviesSaved;","import React from 'react';\r\nimport './ContentChest.css';\r\nimport CaruselComponent from '../CaruselComponent/CaruselComponent';\r\nimport MovieSearch from '../ContentChest/MovieSearch/MovieSearch';\r\nimport MoviePersonal from './MoviePersonal/MoviePersonal';\r\nimport MoviesSaved from './MoviesSaved/MoviesSaved';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useParams\r\n  } from \"react-router-dom\";\r\n\r\nclass ContentChest extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            apiKey: 'bc4ef851ecf12182fb8bcef42dc17d08',\r\n            selectedMovie: { name: '' }\r\n        };\r\n        this.setSelectedMovieHandler = this.setSelectedMovieHandler.bind(this);\r\n    }\r\n\r\n    setSelectedMovieHandler(selectedMovie) {\r\n        this.setState({ selectedMovie })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='ContentChest'>\r\n                <Router>\r\n                    <CaruselComponent setSelectedMovieHandler={this.setSelectedMovieHandler} />\r\n                    <MovieSearch selectedMovie={this.state.selectedMovie} />\r\n                    <Route exact path='/' component={MoviePersonal} />\r\n                    <Route path='/:id' component={MoviesSaved} />\r\n                </Router>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContentChest;","import React, { Component } from 'react';\r\n\r\nimport MyContext from './../MyContext';\r\n\r\nclass GlobalState extends Component {\r\n    state = {\r\n        title: '',\r\n        selectedMovie: '',\r\n        pickedCollection: '',\r\n        trailerCondition:false,\r\n        conditionalMovieSavedRender:'',\r\n        browsedHistory:''\r\n    };\r\n\r\n    updateTitle = title => {\r\n        console.log('update function triggered', title)\r\n        this.setState({ title: title });\r\n    }\r\n\r\n    addedToCollection = selectedMovie => {\r\n        this.setState({ selectedMovie: selectedMovie });\r\n        console.log('triggered', selectedMovie)\r\n    }\r\n\r\n    //List unique key \r\n    updateKey = key => {\r\n        this.setState({ pickedCollection: key });\r\n        console.log('triggered')\r\n    }\r\n\r\n    conditionalTrailerRender = (condition) => {\r\n        this.setState(({ trailerCondition: condition }));\r\n        console.log('conditionTrailer',condition)\r\n    }\r\n    conditionalMovieSavedRender = (condition) => {\r\n        this.setState(({ movieSavedCondition: condition }));\r\n        console.log('movieSavedCondition',condition)\r\n    }\r\n    passingHistory = (history) => {\r\n        this.setState(({ browsedHistory: history }));\r\n        console.log('movieSavedCondition',history)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <MyContext.Provider\r\n                value={{\r\n                    //states\r\n                    title: this.state.title,\r\n                    pickedCollection: this.state.pickedCollection,\r\n                    selectedMovie:this.state.selectedMovie,\r\n                    trailerCondition:this.state.trailerCondition,\r\n                    movieSavedCondition:this.state.movieSavedCondition,\r\n                    browsedHistory:this.state.browsedHistory,\r\n\r\n                    //functions\r\n                    updateKey: this.updateKey,\r\n                    updateTitle: this.updateTitle,\r\n                    addedToCollection: this.addedToCollection,\r\n                    conditionalTrailerRender: this.conditionalTrailerRender,\r\n                    conditionalMovieSavedRender: this.conditionalMovieSavedRender,\r\n                    passingHistory: this.passingHistory,\r\n                }}\r\n            >\r\n                {this.props.children}\r\n            </MyContext.Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GlobalState;","import React from 'react';\r\nimport './App.css';\r\nimport Header from './components/Header/Header';\r\nimport Footer from './components/Footer/Footer';\r\nimport ContentChest from './components/ContentChest/ContentChest';\r\nimport GlobalState from './Global/GlobalState';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nclass App extends React.Component {\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className='App'>\r\n        <GlobalState>\r\n          <Router>\r\n            <Header />\r\n            <ContentChest />\r\n            <Footer />\r\n          </Router>\r\n        </GlobalState>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}